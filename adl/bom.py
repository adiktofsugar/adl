import base64
import os
import hashlib

from . import utils

class Config():
  def __init__(self):
    self.db_file = None
    self.auth_url = None
    self.userinfo_url = None
    self.activation_certificate = None
    self.authentication_certificate = None
    self.current_user = None

  def ready(self):
    return self.activation_certificate is not None and self.authentication_certificate is not None

class Account():
  def __init__(self):
    self.sign_method = None
    self.sign_id = None
    self.device_key = None
    self.auth_key = (None, None)
    self.license_key = (None, None)
    self.urn = None
    self.pkcs12 = None
    self.encryptedPK = None
    self.licenseCertificate = None
    self.authentication_certificate = None
    self.devices = []

  def __str__(self):
    sign = "Sign {} ({}) - {}".format(self.sign_id, self.sign_method, self.urn)
    auth = "Auth key pair: {}".format(self.auth_key)
    license = "License key pair: {}".format(self.license_key)
    pkcs12 = "PKCS12: {}".format(self.pkcs12)
    epk = "Encrypted PK: {}".format(self.encryptedPK)
    lc = "License Certificate: {}".format(self.licenseCertificate)
    auth_cert = "Authentication certificate: {}".format(self.authentication_certificate)
    return '\n'.join([sign, auth, license, pkcs12, epk, lc, auth_cert])

  def get_private_key(self):
    d = self.get_device('local')
    pk = utils.aes_decrypt(base64.b64decode(self.encryptedPK), base64.b64decode(d.device_key))
    return pk

  def get_device(self, device_name):
    for d in self.devices:
      if d.name == device_name:
        return d
    return None

class Device():
  def __init__(self):
    self.name = None
    self.device_key = None
    self.device_id = None
    self.fingerprint = None
    self.type = 'standalone'

  def generate_key(self):
    # Not exactly sure how it is really generated in ADE
    # However as it changes each time, I am guessing it is ok to generate it randomly
    self.device_key = base64.b64encode(os.urandom(16))

  def generate_fingerprint(self):
    # Not sure this is portable
    # Also not the same way it is generated by ADE. Is it an issue ?
    with open('/etc/machine-id', 'r') as f:
      h = hashlib.sha1()
      h.update(f.read().encode())
      d = h.digest()
      self.fingerprint = base64.b64encode(d)

  def __str__(self):
    return "{}: {} ({})".format(self.name, self.type, self.fingerprint)

